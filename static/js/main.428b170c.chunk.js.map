{"version":3,"sources":["components/TodoForm/TodoForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["TodoForm","onSubmit","users","useState","title","setTitle","hasTitleError","setHasTitleError","userId","setUserId","hasUserError","setHasUserError","action","method","event","preventDefault","completed","className","type","value","onChange","target","placeholder","htmlFor","id","required","disabled","map","user","name","UserInfo","href","email","TodoInfo","todo","cn","TodoList","todos","username","getUser","usersFromServer","find","initialTodos","getNewTodoId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.428b170c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Todo } from '../Types/Todo';\nimport { User } from '../Types/User';\n\ntype Prors = {\n  onSubmit: (todo: Todo) => void,\n  users: User[],\n};\n\nexport const TodoForm: React.FC<Prors> = ({ onSubmit, users }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    reset();\n\n    onSubmit({\n      title,\n      completed: false,\n      userId,\n    });\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <label className=\"field\">\n\n        {'Title: '}\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={title}\n          onChange={handleTitleChange}\n          placeholder=\"Enter a title\"\n        />\n\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </label>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-id\">User: </label>\n\n        <select\n          id=\"user-id\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserChange}\n          required\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { User } from '../Types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n  >\n    {user.name}\n  </a>\n);\n","import cn from 'classnames';\nimport { Todo } from '../Types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn(\n      'TodoInfo',\n      { 'TodoInfo--completed': todo.completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../Types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './components/Types/Todo';\n\nfunction getUser(userId: number) {\n  return usersFromServer.find(user => userId === user.id) || null;\n}\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nfunction getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => {\n      return todo.id ? todo.id : 0;\n    }),\n  );\n\n  return maxId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n      user: getUser(todo.userId),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} users={usersFromServer} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}